#include <exception>

#include "AppInfo.h"
#include "GenExam.h"
#include "GenExams.h"
#include "Log.h"

using namespace std;

GenExams::GenExams(std::vector<Reader::message_t> &messages, int nTests)
   : GenComposite()
{
   type_ = "Exams[]";
   for (int i = 0; i < nTests; ++i) {
      std::shared_ptr<GenExam> pExam(new GenExam(messages));
      pExam->setID(getID());
      GenComposite::add(pExam);
      // cout << *this << endl;
   }
   LOGD(id_ + ", intialised");
}

void GenExams::generate(std::ostream &os)
{
   LOGD(type_ + ": " + id_);
   os << "% Generated by " << APPNAME << " v" << VERSION << "\n\n";
   GenComposite::generate(os);
}

void GenExams::add(IGenPtr_t pGen)
{
   LOGD(type_ + ": " + id_);
   for (size_t i = 0; i < generators_.size(); ++i) {
      generators_[i]->add(pGen->copy());
   }
}

std::ostream &GenExams::write(std::ostream &os, int level) const
{
   IGenerator::write(os, level);
   os << ": #Exams = " << generators_.size() << "\n";
   GenComposite::write(os, level + 1);
   return os;
}

void GenExams::setID(const std::string &id)
{
   id_ = id;
   for (size_t i = 0; i < generators_.size(); ++i) {
      generators_[i]->setID(id + string("[" + string(1, ('0' + i)) + "]"));
   }
}
