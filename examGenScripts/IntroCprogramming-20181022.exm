//---------------------------------------------------------------------------------------
// MCT: Multiple Choice Test specification
// ExamGenerator v0.7.0
//---------------------------------------------------------------------------------------

MCT mct[2];

Header h1 
{
	school = "HAN Engineering";                  
	course = "Introduction C programming"; 
	lecturer = "Jos Onokiewicz";
	date = "22th October 2018";
	boxedtext = "The next 25 questions are related to the book 'C Programming'\\"
                "Chapters: 12 ... 22, 24, 25, 27, 28, 30 ... 32. \\ \\"
                "There is only one correct answer in all multiple choice questions. "
                "Success!";
};

mct[0] += h1;
mct[1] += h1;

//---------------------------------------------------------------------------------------

// C1..C11

//---------------------------------------------------------------------------------------

LogicExprAON C12a;
mct += C12a;

// LogicExprAON C12b;
// mct += C12b;

// LogicExprAOXN C12c;
// mct += C12c;

//---------------------------------------------------------------------------------------

// C13..C14

//---------------------------------------------------------------------------------------

NestedFor C15a;
mct += C15a;

//---------------------------------------------------------------------------------------

Item C16b
{
	level = 2;
	stem = "How many times TEXT is get printed?";
	CodeText cb = "int cnt = 0;"
			  " "
			  "for (cnt = -2; cnt < 2 ; cnt++)"
			  "{"
			  "   printf(\"TEXT\");"
			  "}";
	stem += cb;
	
	o[1] = "0";
	o[2] = "3";
	o[3] = "4";
	o[4] = "5";

	o[3] = correct;
};

mct += C16b;


//---------------------------------------------------------------------------------------

Item C16c
{
	level = 2;
	stem = "What is get printed?";
	CodeText cb = "int count = 0;"
			      " "
			      "for (count = 2; count > -2 ; count--)"
			      "{"
			      "   printf(\"%d \", count);"
			      "}";
	stem += cb;
	
	o[1] = "2 1 0 -1 -2";
	o[2] = "2 1 0 -1";
	o[3] = "-2 -1 0 1";
	o[4] = "-2 -1 0 1 2";

	o[2] = correct;
	//shuffleON();
};

mct += C16c;


//---------------------------------------------------------------------------------------

Item C16d
{
	level = 2;
	stem = "How many times TEXT is get printed?";
	CodeText cb = "int cnt = 0;"
			  " "
			  "for (cnt = 1; cnt < 7; cnt++)"
			  "{"
			  "   printf(\"TEXT\");"
			  "   if (cnt > 3) {"
			  "      break;"
			  "   }"
			  "}";
	stem += cb;
	
	o[1] = "2";
	o[2] = "3";
	o[3] = "4";
	o[4] = "6";

	o[2] = correct;
};

mct += C16d;

//---------------------------------------------------------------------------------------

Item C17a
{
	level = 2;
	stem = "What is get printed?";
	CodeText cb = "int cnt = 2;"
			  " "
			  "switch (cnt)"
			  "{"
			  "   case 1:"
			  "      printf(\"1\");"
			  "      break;"
			  "   case 2:"
			  "      printf(\"2\");"
			  "      break;"
			  "   case 3:"
			  "      printf(\"3\");"
			  "      break;"
			  "}";
	stem += cb;
	
	o[1] = "1";
	o[2] = "2";
	o[3] = "3";
	o[4] = "Nothing wil be printed.";

	o[1] = correct;
};

mct += C17a;

//---------------------------------------------------------------------------------------

Item C17b
{
	level = 2;
	stem = "What is get printed?";
	CodeText cb = "int cnt = 2;"
			  " "
			  "switch (cnt)"
			  "{"
			  "   case 1:"
			  "      printf(\"1\");"
			  "      break;"
			  "   case 2:"
			  "      printf(\"2\");"
			  "   case 3:"
			  "      printf(\"3\");"
			  "      break;"
			  "}";
	stem += cb;
	
	o[1] = "1";
	o[2] = "2";
	o[3] = "23";
	o[4] = "Nothing wil be printed.";

	o[3] = correct;
};

mct += C17b;

//---------------------------------------------------------------------------------------

Item C17c
{
	level = 2;
	stem = "What is get printed?";
	CodeText cb = "int cnt = 0;"
			  " "
			  "switch (cnt)"
			  "{"
			  "   case 1:"
			  "      printf(\"1\");"
			  "      break;"
			  "   case 2:"
			  "      printf(\"2\");"
			  "      break;"
			  "}";
	stem += cb;
	
	o[1] = "0";
	o[2] = "1";
	o[3] = "2";
	o[4] = "Nothing wil be printed.";

	o[4] = correct;
};

mct += C17c;


//---------------------------------------------------------------------------------------

Item C17d
{
	level = 1;
	stem = "What is get printed?";
	CodeText cb = "char c = '0';"
			  " "
			  "switch (c)"
			  "{"
			  "   case '1':"
			  "      printf(\"1\");"
			  "      break;"
			  "   case '2':"
			  "      printf(\"2\");"
			  "   case '3':"
			  "      printf(\"3\");"
			  "      break;"
			  "   default:"
			  "      printf(\"WRONG\");"
			  "      break;"
			  "}";
	stem += cb;
	
	o[1] = "1";
	o[2] = "2";
	o[3] = "WRONG";
	o[4] = "Nothing wil be printed.";

	o[4] = correct;
};

mct += C17d;

//---------------------------------------------------------------------------------------

// C18

//---------------------------------------------------------------------------------------

Item C19a
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText j1 = "char txt[20] = \"1a2b\";"
	          "int index = 0;"
			  ""
			  "for (index = 0; index < strlen(txt); index++) {"
			  "   if (!isalpha(txt[index]) {"
			  "      printf(\"%c\", txt[index]);"
			  "   }"
			  "}";
	stem += j1;
	stem += "The next output is generated:";	
  
	o[1] = "ab";
	o[2] = "12";
	o[3] = "12ab";
	o[4] = "Nothing will be printed.";
	
	o[2] = correct;
}

mct += C19a;

//---------------------------------------------------------------------------------------

Item C19b
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText j1 = "char txt[20] = \"abcXYZ89\";"
	          "int index = 0;"
			  ""
			  "for (index = 0; index < strlen(txt); index++) {"
			  "   txt[index] = topupper(txt[index]);"
			  "}"
			  "printf(\"%s\", txt);";
	stem += j1;
	stem += "The next output is generated:";	
  
	o[1] = "XYZ";
	o[2] = "abc89";
	o[3] = "ABCXYZ";
	o[4] = "ABCXYZ89";
	
	o[4] = correct;
}

mct += C19b;

//---------------------------------------------------------------------------------------

Item C19c
{
	stem = "Consider the next C code block:";
	CodeText code = "char info[20] = \"abcABC\";"
			  ""
			  "info[3] = '\\0';"
			  " "
			  "printf(\"%s\", info);";
	stem += code;
	stem += "The next output is shown:";	
  
	o[1] = "abc0BC";
	o[2] = "abc\textbackslash 0BC";
	o[3] = "abc";
	o[4] = "BC";
	
	o[3] = correct;
}

mct += C19c;

//---------------------------------------------------------------------------------------


Item C20a
{
	level = 1;
	stem = "Consider the next C code block for generating a random number:";
	CodeText j1 = "int result = (rand() % 10) + 2;";
	stem += j1;
	stem += "The above expression puts a random number .......... in $result$?";	
  
	o[1] = "from 0 up to including 10";
	o[2] = "from 0 up to including 12";
	o[3] = "from 2 up to including 11";
	o[4] = "from 2 up to including 12";
	
	o[3] = correct;
}

mct += C20a;

//---------------------------------------------------------------------------------------

Item C21a
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText code = "int data[4] = {2, 4, 6, 8};"
	                ""
			        "printf(\"%d \", data[4]);";
	stem += code;
	stem += "The next value(s) will be printed:";	
  
	o[1] = "4";
	o[2] = "2 4 6 8";
	o[3] = "8";
	o[4] = "This is not defined, because the index 4 is outside the array boundary.";
	
	o[4] = correct;
}

mct += C21a;

//---------------------------------------------------------------------------------------

Item C22a
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText j1 = "#define SIZE 5"
	          " "
	          "int data[SIZE] = {2, 4, 10, 6, 8};"
			  "int index = 0;"
	          "int found = 0;"
			  "int idSearch = 10;"
			  ""
			  "for (index = 0; index < SIZE; index++) {"
			  "   if (data{index] == idSearch) {"
			  "      found = 1;"
			  "      break;"
			  "   }"
			  "}"
			  "if (found) {"
			  "   printf(\"found: %d at index %d\", idSearch, index);"
			  "}";
	stem += j1;
	stem += "This will be printed:";	
  
	o[1] = "found: 10 at index 2";
	o[2] = "found: 10 at index 3";
	o[3] = "found: 6 at index 3";
	o[4] = "Nothing will be printed.";
	
	o[1] = correct;
}

mct += C22a;

//---------------------------------------------------------------------------------------

// C23 XXXX

//---------------------------------------------------------------------------------------

Item C24a
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText j1 = "#define SIZE 4"
	          " "
	          "int data[SIZE] = {2, 10, 16, 8};"
			  "int *pInt = &data[1];"
			  ""
			  "pInt++;"
			  "printf(\"%d\", *pInt);";
	stem += j1;
	stem += "This will be printed:";	
  
	o[1] = "10";
	o[2] = "11";
	o[3] = "16";
	o[4] = "Undefined because the pointer has changed.";
	
	o[3] = correct;
}

mct += C24a;

Item C24b
{
	level = 1;
	stem = "Consider the next C code block:";
	CodeText j1 = "#define SIZE 4"
	          " "
	          "int data[SIZE] = {2, 10, 16, 8};"
			  "int *pInt = &data[1];"
			  ""
			  "(*pInt)++;"
			  "printf(\"%d\", *pInt);";
	stem += j1;
	stem += "This will be printed:";	
  
	o[1] = "10";
	o[2] = "11";
	o[3] = "16";
	o[4] = "17";
	
	o[2] = correct;
}

mct += C24b;
  
//---------------------------------------------------------------------------------------

Item C25a
{
	level = 1;
	stem = "Consider the next C code block containing an array of char pointers:";
	CodeText j1 = "#define SIZE 4"
	          " "
	          "char *data[SIZE] = {\"one\", \"test\", \"qwerty\", \"12345\"};"
			  " "
			  "for (index = 2; index < SIZE; index++) {"
			  "   printf(\"%s \", data[index]);"
			  "}";
	stem += j1;
	stem += "This will be printed:";	
  
	o[1] = "q 1";
	o[2] = "qwerty 12345";
	o[3] = "test";
	o[4] = "e st erty 345";
	
	o[2] = correct;
}

mct += C25a;

//---------------------------------------------------------------------------------------

// C26 XXXX

//---------------------------------------------------------------------------------------

Item C27a
{
	stem = "Consider the next C code block containing a struct:";
	CodeText j1 = "struct data {"
	          "   int x;"
	          "   double d;"
			  "};";
	stem += j1;
	stem += "How can we initialise the struct variable $example$?";	
  
	o[1] = "struct data example = 2, 3.33;";
	o[2] = "struct data example: x = 2, d = 3.33;";
	o[3] = "struct data example = \{2, 3.33\};";
	o[4] = "struct data example = .x = 2, .d = 3.33;";
	
	o[2] = correct;
}

mct += C27a;

//---------------------------------------------------------------------------------------

Item C27b
{
	stem = "Consider the next C code block containing a struct:";
	CodeText code = "struct data {"
	          "   int x;"
	          "   double d;"
			  "};"
			  " "
			  "struct data example;";
	stem += code;
	stem += "How can we set the $x$ field of $example$ to 100?";	
  
	o[1] = "example.x = 100;";
	o[2] = "example-$>$x = 100;";
	o[3] = "x.example = 100;";
	o[4] = "x-$>$example = 100;";
	
	o[2] = correct;
}

mct += C27b;

//---------------------------------------------------------------------------------------

Item C28a
{
	stem = "Consider the next C code block for writing data to a file:";
	CodeText code = "int count = 10;"
	                "double money = 1.34;"
					" "
					"FILE *pFile = fopen(\"data.txt\", \"w\");"
					;
	stem += code;
	stem += "How can we write $count$ and $money$ to the file $data.txt$?";	
  
	o[1] = ".";
	CodeText co1 = "fprintf(\"%d %lf\", count, money, \"data.txt\");";
	o[1] += co1;

	o[2] = ".";
	CodeText co2 = "fprintf(\"%d %lf\", count, money, pFile);";
	o[2] += co2;

	o[3] = ".";
	CodeText co3 = "fprintf(\"data.txt\", \"%d %lf\", count, money);";
	o[3] += co3;

	o[4] = ".";
	CodeText co4 = "fprintf(pFile, \"%d %lf\", count, money);";
	o[4] += co4;
	
	o[4] = correct;
}

mct += C28a;

//---------------------------------------------------------------------------------------

// C29 XXXX

//---------------------------------------------------------------------------------------

// C30 in C31

//---------------------------------------------------------------------------------------

Item C31a
{
   stem = "Consider the next C function:";
   CodeText code = "int calc(char operator, int a, int b) {"
                   "   int result = 0;"
                   "   switch (operator) {"
                   "      case('+'):"
                   "         result = a + b;"
                   "         break;"
                   "      case('-'):"
                   "         result = a - b;"
                   "         break;"
                   "   }"
                   "   return result;"
                   "}"
                   " "
                   "printf(\"%d %d %d\", calc(\'+', 1, 2),"
                   "                   calc('-', 9, 4),"
                   "                   calc('*', 10, 10));";
	stem += code;
	stem += "What is get printed?";	
  
	o[1] = "3, 5";
	o[2] = "3, 5, 0";
	o[3] = "3, 5, 100";
	o[4] = "Compiler error, $calc$ is missing case('*')";
	
	o[2] = correct;
};

mct += C31a;

//---------------------------------------------------------------------------------------

Item C31b
{
   stem = "Consider the next C function:";
   CodeText code = "void update(int *pI, int offset) {"
                   "   *pI = (*pI) + offset;" 
                   "}"
				   " "
                   "int data = 10;"
				   " "
				   "update(&data, 100);"
                   "printf(\"%d\", data);";
	stem += code;
	stem += "What is get printed?";	
  
	o[1] = "10";
	o[2] = "110";
	o[3] = "Nothing, function does not return any value.";
	o[4] = "Compiler error, function does not have a return statement.";
	
	o[2] = correct;
};

mct += C31b;

//---------------------------------------------------------------------------------------

// C32 

//---------------------------------------------------------------------------------------

Item Cenuma
{
	stem = "Consider the next C enum declaration:";
	CodeText code = "enum commands {C_START, C_STOP = 5, C_HIGHER, C_LOWER = 10};";
	stem += code;
	stem += "What are the values for the named constants in the enumerator list?";	
  
	o[1] = "0, 1, 2, 3";
	o[2] = "0, 5, 3, 10";
	o[3] = "0, 5, 6, 10";
	o[4] = "Compiler error, C\_START and C\_HIGHER are not initialised.";
	
	o[3] = correct;
};

mct += Cenuma;

//---------------------------------------------------------------------------------------

Item Cxxa
{
	stem = "Consider the next C statement:";
	CodeText code = "double data = 6 / 4;";
	stem += code;
	stem += "The value of $data$ is?";	
  
	o[1] = "1";
	o[2] = "1.0";
	o[3] = "1.5";
	o[4] = "Compiler error, 1 is not a double value.";
	
	o[1] = correct;
};

mct += Cxxa;

//---------------------------------------------------------------------------------------
